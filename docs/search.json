[
  {
    "objectID": "publication.html",
    "href": "publication.html",
    "title": "Publication",
    "section": "",
    "text": "Here is some papers I have published and the awards.\n\nAward\n\nExcellent Student Paper Award: 2022 International Workshop on Smart Info-Media Systems in Asia\n\n\n\nInternational conference\n\nMuhammad Harry Bintang Pratama, Tomoki Nakashima, Yuhei Nagaoe, Masayuki Kurosaki, and Hiroshi Ochi, “Experimental Evaluation of Rate Adaptation using Deep-Q-Network in IEEE 802.11 WLAN”, IEEE Consumer Communications & Networking Conference(CCNC2023), Las Vegas, 9 January, 2023.\nTomoki Nakashima, Leonardo Lanante, Muhammad Harry Bintang Pratama, Masayuki Kurosaki, and Hiroshi Ochi,“ns3-ai: Rate Control for Wireless LAN by Deep Q-Network,” International Workshop on Smart Info-Media System in Asia(SISA2022), Online, 15 September, 2022.\nMuhammad Harry Bintang Pratama, Leonardo Lanante, and Hiroshi Ochi, “A Low Complexity Carrier Frequency Offset Compensation for Full-Duplex with Cooperative MIMO in IEEE 802.11 WLAN,” International Workshop on Smart Info-Media System in Asia(SISA2022), Online, 15 September, 2022.\nDody Ichwana Putra, M.Harry Bintang, Leonardo Lanante Jr, and Hiroshi Ochi, “Packet Format and Modulation Classification of Wireless LAN Using Distributed Convolutional Neural Network”, Proc. IEEE International Symposium On Intelligent Signal Processing And Communication Systems (ISPACS 2021), Online, paper #137, November 2021.\nMuhammad Harry Bintang Pratama, Dody Ichwana Putra, Leonardo Lanante and Hiroshi Ochi, “Convolutional Neural Network for Asynchronous Packet Parameter Identification in Dense Wi-Fi,” Proc. 2021 IEEE International Conference on Communications Workshops, IEEE ICC 2021 WS-16, paper #1570707186, pp. 1-6, Online,14-23 (17) June 2021.\n\n\n\nDomestic conference\n\nMuhammad Harry Bintang Pratama, Leonardo Lanante Jr, 尾知博、”Deep Learning-based OBSS Packet Recognition in the presence of OFDM Symbol Timing Offset”, スマートインフォメディアシステム研究会（SIS)、Soft Computing, paper #IEICE-SIS2020-55, pp. 109-113, Online, 5 March 2021.\nMuhammad Harry Bintang Pratama, Leonardo Lanante Jr, 尾知博、”CNN-based OBSS Packet Detection for Spatial Reuse Enhancement”,2021電子情報通信学会総合大会、D-20 (情報論的学習理論と機械学習), paper #21G2030, Online, 9-12 (11) March 2021."
  },
  {
    "objectID": "posts/example.html",
    "href": "posts/example.html",
    "title": "harry_blog",
    "section": "",
    "text": "#importing libraries\nimport altair as alt\nfrom bokeh.sampledata.penguins import data as penguins\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n#plotting\nbrush = alt.selection(type='interval')\n\npoints = alt.Chart(\n  data=penguins, \n  title=\"Palmer Penguins Dataset\",\n  ).mark_circle(size=60).encode(\n  alt.X('bill_length_mm', scale=alt.Scale(domain=[30,60])),\n  alt.Y('bill_depth_mm', scale=alt.Scale(domain=[12,22])),\n  color='species',\n  ).add_selection(\n    brush\n)\n\nbars = alt.Chart(penguins).mark_bar().encode(\n    y='island',\n    color='island',\n    x='count(island)'\n).transform_filter(\n    brush\n)\n\npoints & bars\n\n/home/harry/.local/lib/python3.8/site-packages/altair/utils/deprecation.py:65: AltairDeprecationWarning: 'selection' is deprecated.\n   Use 'selection_point()' or 'selection_interval()' instead; these functions also include more helpful docstrings.\n  warnings.warn(message, AltairDeprecationWarning, stacklevel=1)\n/home/harry/.local/lib/python3.8/site-packages/altair/utils/deprecation.py:65: AltairDeprecationWarning: 'add_selection' is deprecated. Use 'add_params' instead.\n  warnings.warn(message, AltairDeprecationWarning, stacklevel=1)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Harry PRATAMA",
    "section": "",
    "text": "I’m a PhD student majoring in computer science with a focus on Machine Learning, Signal Processing, VLSI, and Wireless Communication. This platform is where I share the knowledge I’ve gained, the insights I’ve gathered, and the challenges I’ve overcome during my academic journey."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Harry PRATAMA",
    "section": "Education",
    "text": "Education\n\nPh.D. in Computer science, 2022-now\nKyushu Institute of Technology, Japan\nM. Eng. in Advanced Informatics, 2022\nKyushu Institute of Technology, Japan\nB. Eng. in Electrical Engineering (specialised in Telecommunication), 2017\nDiponegoro University, Indonesia"
  },
  {
    "objectID": "index.html#interests",
    "href": "index.html#interests",
    "title": "Harry PRATAMA",
    "section": "Interests",
    "text": "Interests\n\nData Analysis\nData Visualisation\nKnowledge Sharing\nLearning New Skills\nQuarto\nDota"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Little fun project with Pi Car\n\n\n\n\n\n\n\npython\n\n\n\n\nI had a little fun playing with the Pi Car.\n\n\n\n\n\n\nMay 7, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post1_20230805/post1.html",
    "href": "posts/post1_20230805/post1.html",
    "title": "Little fun project with Pi Car",
    "section": "",
    "text": "Last week, my professor suddenly asked me to make some applications for the Pi Car. Pi Cart[^picar] is a robot run on top of Raspberry Pi platform, and can be programmed or controlled as a self-driving or multi purposes robot car. I know that the lab has the robots but I did not know that they are going to be actually used.\nSince the Raspberry Pi serves as the brain of the robot, we can enable it to execute Python code and make decisions based on its environment. There are some hardware modules attached to this robot:\nWhen I asked back what kind of applications, he said that it is for demonstrational purpose to children Here are some applications that I have made for that purpose. [^picar]: See the Pi Car documentation for more information.\n## Matador The idea of matador is that we want the robot car to move toward and object with red color, just like a bull charging in a matador. Pi car came with a few example code that can be executed right away. I am using the color_detection.py and avoiding_obstacles.py from the example as a base to make the matador program. Here is the code:"
  },
  {
    "objectID": "posts/post1_20230805/post1.html#battle-tank",
    "href": "posts/post1_20230805/post1.html#battle-tank",
    "title": "Little fun project with Pi Car",
    "section": "Battle tank",
    "text": "Battle tank\nThe second application requires two Pi Car. instead of making the robot cars actually fighting and shooting some missiles, here we want to have both cars fight each other by capturing an object placed in each car. The winner is the one who can capture opponent’s object first. I am using the color_detection.py, video_car.py, and time_to_speech.py from the example as a base to make the battle tank program. Here is the code:\nprint('Please run under desktop environment (eg: vnc) to display the image window')\n\nfrom robot_hat import TTS\nfrom robot_hat.utils import reset_mcu\nfrom picarx import Picarx\nfrom vilib import Vilib\nfrom time import sleep, time, strftime, localtime\nfrom picamera.array import PiRGBArray\nfrom picamera import PiCamera\nimport numpy as np\nimport time\nimport readchar\nimport cv2\nfrom vilib import Vilib\n\nreset_mcu()\nsleep(0.2)\n\nmanual = '''\nPress key to call the function(non-case sensitive):\n\n    O: speed up\n    P: speed down\n    W: forward  \n    S: backward\n    A: turn left\n    D: turn right\n    F: stop\n    T: take photo\n\n    Ctrl+C: quit\n'''\n\npx = Picarx()\n\ndef move(operate:str, speed):\n\n    if operate == 'stop':\n        px.stop()  \n    else:\n        if operate == 'forward':\n            px.set_dir_servo_angle(0)\n            px.forward(speed)\n        elif operate == 'backward':\n            px.set_dir_servo_angle(0)\n            px.backward(speed)\n        elif operate == 'turn left':\n            px.set_dir_servo_angle(-30)\n            px.forward(speed)\n        elif operate == 'turn right':\n            px.set_dir_servo_angle(30)\n            px.forward(speed)\n        \n\n\n\n\n\ndef main():\n    speed = 0\n    status = 'stop'\n\n    Vilib.camera_start(vflip=False,hflip=False)\n    Vilib.display(local=True,web=True)\n    Vilib.color_detect(\"red\")  # Set the color to be detected\n    time.sleep(2)\n    print('\\npress Ctrl+C to exit\\n')\n\n\n    sleep(2)  # wait for startup\n    print(manual)\n    \n    while True:\n        print(\"\\rstatus: %s , speed: %s    \"%(status, speed), end='', flush=True)\n        # readkey\n        key = readchar.readkey().lower()\n        # operation \n        if key in ('wsadfop'):\n            # throttle\n            if key == 'o':\n                if speed &lt;=90:\n                    speed += 10           \n            elif key == 'p':\n                if speed &gt;=10:\n                    speed -= 10\n                if speed == 0:\n                    status = 'stop'\n            # direction\n            elif key in ('wsad'):\n                if speed == 0:\n                    speed = 10\n                if key == 'w':\n                    # Speed limit when reversing,avoid instantaneous current too large\n                    if status != 'forward' and speed &gt; 60:  \n                        speed = 60\n                    status = 'forward'\n                elif key == 'a':\n                    status = 'turn left'\n                elif key == 's':\n                    if status != 'backward' and speed &gt; 60: # Speed limit when reversing\n                        speed = 60\n                    status = 'backward'\n                elif key == 'd':\n                    status = 'turn right' \n            # stop\n            elif key == 'f':\n                status = 'stop'\n            # move \n            move(status, speed)  \n        # get red area for some time after press t\n        elif key == 't':\n            try:\n                num = Vilib.detect_obj_parameter['color_n'] \n                print(\"\\rnumber of color blocks found: %s  \"%num, end='', flush=True)\n                time.sleep(0.5)\n                if num &gt; 10:\n                    words = [\"Bang!\", \"I win\"]\n                    tts_robot = TTS()\n                    for i in words:\n                        print(i)\n                        tts_robot.say(i)\n                    break\n\n\n            except KeyboardInterrupt:\n                print('\\nquit ...')\n                break\n            except Exception as e:\n                print('error:%s'%e)\n                break\n\n\n            \n        # quit\n        elif key == readchar.key.CTRL_C:\n            print('\\nquit ...')\n            px.stop()\n            Vilib.camera_close()\n            break \n\n        sleep(0.1)\n\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except Exception as e:    \n        print(\"error:%s\"%e)\n    finally:\n        px.stop()\n        Vilib.camera_close()"
  },
  {
    "objectID": "posts/post1_20230805/post1.html#result",
    "href": "posts/post1_20230805/post1.html#result",
    "title": "Little fun project with Pi Car",
    "section": "Result",
    "text": "Result\nI will update this page when I have tested the codes above."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Here is some projects that I have been working on"
  }
]